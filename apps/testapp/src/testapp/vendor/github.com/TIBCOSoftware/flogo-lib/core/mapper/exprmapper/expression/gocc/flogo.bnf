/*
    This file use to describe all function and expression that support in Flogo.
    BNF standard expression

    Author: Tracy Li
 */

!whitespace : ' ' | '\t' | '\n' | '\r' ;

_digit : '0'-'9' ;

_number : _digit {_digit} ;
_float_exp  : ( 'e' | 'E' ) [ '+' | '-' ] _number ;

_float_lit : ( _number '.' _number _float_exp )
	| ( _number '.' ( _number | _float_exp ) )
	| ( '.' ( _number | _float_exp ) )
	| ( _number _float_exp )
	;

float : (_float_lit);
number : (_number);
_character_digit:  'a'-'z' | 'A'-'Z' | '0'-'9' | ':' | '.' | '_' | '-';

/*Expression Operator*/
/*
    Expression which support operators so far
        eq          -> ==
       	or          -> ||
       	and         -> &&
       	ne          -> !=
       	gt          -> >
       	lt          -> <
       	ge          -> >=
       	le          -> <=
       	+           -> +
       	-           -> -
       	*           -> *
*/
_operator_charactor : '>' | '<' | '|' | '&' | '!' | '=' | '+' | '-' | '*' | '/' | ' ';
operator_charactor : {_operator_charactor} ;

_refbracket : '[' {.} ']';
_ref : 'a'-'z' | 'A'-'Z' | '.' | '0'-'9' | '-' | '[' | ']' | '_' | ' ' | '$' | '{' | '}' | _refbracket;
_flogostring : {_ref};

//Static function name, such as concat, substring, len etc...
function_name : {_character_digit} ;
_quotedpair : '\\' . ;

//Double quotes strings
doublequotes_string : '"' {_quotedpair | .} '"';
singlequote_string : '\'' {_quotedpair |.} '\'' ;
//Flogo Ref string, such as" $A3.Input.Query.Result
argument : '$' _flogostring ;


<< import "github.com/TIBCOSoftware/flogo-lib/core/mapper/exprmapper/expression/direction" >>


/*

    Describe Flogo function rules.
    Example:
        1. concat("This","is",concat("my","first"),"gocc",concat("lexer","and","parser"),concat("go","program","!!!"))
           Result:Thisismyfirstgocclexerandparsergoprogram!!!
        2. concat("Beijing",String(number(Len("lixingwang"))))
           Result: Beijing10
 */
Flogo
    : BaseExpr
    | TernaryExpr
    ;

BaseExpr
    : Func
    | Expr
    | Param
    ;
Func
	: function_name "(" Args ")"                 << direction.NewFunction($0, $2) >>
	| function_name "()"                         << direction.NewFunction($0, "") >>

	;
Args
	: ExprParam                                  <<direction.NewArgument($0)>>
	| Args "," Args                              <<direction.NewArguments($0, $2)>>
    ;

Expr
    : ExprArg Operator ExprArg                   <<direction.NewExpression($0, $1, $2) >>
    ;
ExprArg
    : ExprParam                                  <<direction.NewExpressionField($0)>>
    | "(" Expr ")"                               <<direction.NewExpressionField($1) >>
    ;
Operator
    : operator_charactor
    ;
TernaryExpr
    : BaseExpr "?" BaseExpr ":" BaseExpr     <<direction.NewTernaryExpression($0, $2, $4)>>
    ;

ExprParam
    : Param                                      <<direction.NewExpressionField($0)>>
    | Func                                       <<direction.NewExpressionField($0)>>
    ;
Param
     : Int
     | Float
     | Bool
     | DoubleQString
     | SingleQString
     | MappingRef
     | Nil
     ;

DoubleQString
    : doublequotes_string                        <<direction.NewDoubleQuoteStringLit($0)>>
    ;
SingleQString
    : singlequote_string                         <<direction.NewSingleQuoteStringLit($0)>>
    ;
Int
    : number                                     <<direction.NewIntLit($0)>>
    ;
MappingRef
    : argument                                   <<direction.NewMappingRef($0)>>
    ;
Bool
    : "true"                                     <<direction.NewBool($0)>>
    | "false"                                    <<direction.NewBool($0)>>
    ;
Float
    : float                                      <<direction.NewFloatLit($0)>>
    ;
Nil
    : "nil"                                      <<direction.NewNilLit($0)>>
    ;